// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0 <0.9.0;

/// @title Stores and compares hashes of encrypted datasets between data owners and cloud providers
/// @author Jackson Bullard
contract DataConfirmation {
	/// @notice Maps cloud provider to data hash generated by data owner.
	mapping (address => Confirmation[]) public cloudProviderToData;

	/// @notice Stores the data hash generated by a data owner and whether the cloud provider's hash has been verified
	struct Confirmation {
		uint256 dataHash;
		bool verifiedHash;
	}

	/// @notice For data owners; map hash of encrypted dataset to the intended cloud provider.
	/// @param _dataHash The keccak256 hash of the encrypted dataset held by the data owner
	/// @param _cloudProvider The address of the cloud provider that the encrypted dataset was sent to
	function mapProviderToData(uint256 _dataHash, address _cloudProvider) external {
		// TO-DO: Enforce authorized data owners only (agreements are made off-chain)
		// TO-DO: Ensure duplicate confirmations do not occur
		Confirmation memory confirmation = Confirmation(_dataHash, false);
		cloudProviderToData[_cloudProvider].push(confirmation);
	}

	/**
		@notice For cloud providers; determine whether data was transferred successfully
			from data owner to cloud provider by comparing hashes.
	*/
	/// @param _dataHash The keccak256 hash generated by the cloud provider using the received dataset
	function verifyDataHash(uint256 _dataHash) external {
		Confirmation[] memory mappedHashes = cloudProviderToData[msg.sender];

		for (uint i = 0; i < mappedHashes.length; i++) {
			// Compare hashes
			if (mappedHashes[i].dataHash == _dataHash) {
				cloudProviderToData[msg.sender][i].verifiedHash = true;
				break;
			}
		}
	}
}
